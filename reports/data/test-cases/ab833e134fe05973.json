{"uid":"ab833e134fe05973","name":"test_cases_api[cassesinfo0]","fullName":"testcases.cases_api.CasesApi#test_cases_api","historyId":"b9ee4400c75e0b8822a254e150f7c522","time":{"start":1675660854257,"stop":1675660854635,"duration":378},"status":"failed","statusMessage":"AssertionError: 200 == 20","statusTrace":"self = <cases_api.CasesApi object at 0x129495190>\ncassesinfo = {'method': 'get', 'name': 'access_token', 'params': {'appid': 'wx8a9de038e93f77ab', 'grant_type': 'client_credential', 'secret': '8326fc915928dee3165720c910effb86'}, 'url': 'http://api.weixin.qq.com/cgi-bin/token', ...}\n\n    @pytest.mark.parametrize('cassesinfo',read_yaml_testcase('/test_api.yaml'))\n    def test_cases_api(self,cassesinfo):\n        data_list = ['method','url','params','data','headers','cookies','files','auth','timeout','allow_redirects','proxies','hoooks','stream','verify','cert','json']\n        send_res = ''\n        try:\n            self.logger.warning('{}'.format('-' * 100))\n            self.logger.warning('{}{}{}'.format('-'*30,cassesinfo['name'],'-'*30))\n            # self.logger.info('cassesinfo：{}'.format(cassesinfo))\n            self.logger.info('url：{}'.format(cassesinfo['url']))\n            self.logger.info('method：{}'.format(cassesinfo['method']))\n            if 'params' in cassesinfo.keys():\n                self.logger.info('params：{}'.format(cassesinfo['params']))\n            if 'data' in cassesinfo.keys():\n                self.logger.info('data：{}'.format(cassesinfo['data']))\n            if 'files' in cassesinfo.keys():\n                self.logger.info('files：{}'.format(cassesinfo['files']))\n            self.logger.info('validate：{}'.format(cassesinfo['validate']))\n            for i in set(cassesinfo.keys()) & set(data_list):\n                send_res += '{}=cassesinfo[\"{}\"],'.format(i,i)\n            if 'token' in cassesinfo['name']:\n                res = eval(\"RequestUtil().send_all_rquest({})\".format(send_res.strip(',')))\n                write_yaml({cassesinfo['name']: res.json()[cassesinfo['name']]})\n            else:\n                for i in cassesinfo['params'].keys():\n                    if 'token' in i:\n                        cassesinfo['params'][i] = read_yaml()[i]\n                        break\n                if 'files' in send_res:\n                    res = eval(\"RequestUtil().send_all_rquest({})\".format(send_res.replace('=cassesinfo[\"files\"]',\"={'media': open(cassesinfo['files'], 'rb')}\").strip(',')))\n                else:\n                    res = eval(\"RequestUtil().send_all_rquest({})\".format(send_res.strip(',')))\n            self.logger.info('msg：{}'.format(res.text))\n        except Exception as e:\n            self.logger.exception(e)\n    \n        try:\n            for i in cassesinfo['validate']:\n                for k,v in i.items():\n                    flas = ''\n                    if k == 'eq':\n                        flas = eval(\"res.{}\".format(i[k][0]))\n>                       equals(flas,i[k][1])\n\ntestcases/cases_api.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncheck_value = 200, expect_value = 20\n\n    def equals(check_value, expect_value):\n>       assert check_value == expect_value, f'{check_value} == {expect_value}'\nE       AssertionError: 200 == 20\n\ncommons/validate_util.py:8: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"cases","time":{"start":1675660854256,"stop":1675660854256,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"clear_session","time":{"start":1675660854256,"stop":1675660854256,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: 200 == 20","statusTrace":"self = <cases_api.CasesApi object at 0x129495190>\ncassesinfo = {'method': 'get', 'name': 'access_token', 'params': {'appid': 'wx8a9de038e93f77ab', 'grant_type': 'client_credential', 'secret': '8326fc915928dee3165720c910effb86'}, 'url': 'http://api.weixin.qq.com/cgi-bin/token', ...}\n\n    @pytest.mark.parametrize('cassesinfo',read_yaml_testcase('/test_api.yaml'))\n    def test_cases_api(self,cassesinfo):\n        data_list = ['method','url','params','data','headers','cookies','files','auth','timeout','allow_redirects','proxies','hoooks','stream','verify','cert','json']\n        send_res = ''\n        try:\n            self.logger.warning('{}'.format('-' * 100))\n            self.logger.warning('{}{}{}'.format('-'*30,cassesinfo['name'],'-'*30))\n            # self.logger.info('cassesinfo：{}'.format(cassesinfo))\n            self.logger.info('url：{}'.format(cassesinfo['url']))\n            self.logger.info('method：{}'.format(cassesinfo['method']))\n            if 'params' in cassesinfo.keys():\n                self.logger.info('params：{}'.format(cassesinfo['params']))\n            if 'data' in cassesinfo.keys():\n                self.logger.info('data：{}'.format(cassesinfo['data']))\n            if 'files' in cassesinfo.keys():\n                self.logger.info('files：{}'.format(cassesinfo['files']))\n            self.logger.info('validate：{}'.format(cassesinfo['validate']))\n            for i in set(cassesinfo.keys()) & set(data_list):\n                send_res += '{}=cassesinfo[\"{}\"],'.format(i,i)\n            if 'token' in cassesinfo['name']:\n                res = eval(\"RequestUtil().send_all_rquest({})\".format(send_res.strip(',')))\n                write_yaml({cassesinfo['name']: res.json()[cassesinfo['name']]})\n            else:\n                for i in cassesinfo['params'].keys():\n                    if 'token' in i:\n                        cassesinfo['params'][i] = read_yaml()[i]\n                        break\n                if 'files' in send_res:\n                    res = eval(\"RequestUtil().send_all_rquest({})\".format(send_res.replace('=cassesinfo[\"files\"]',\"={'media': open(cassesinfo['files'], 'rb')}\").strip(',')))\n                else:\n                    res = eval(\"RequestUtil().send_all_rquest({})\".format(send_res.strip(',')))\n            self.logger.info('msg：{}'.format(res.text))\n        except Exception as e:\n            self.logger.exception(e)\n    \n        try:\n            for i in cassesinfo['validate']:\n                for k,v in i.items():\n                    flas = ''\n                    if k == 'eq':\n                        flas = eval(\"res.{}\".format(i[k][0]))\n>                       equals(flas,i[k][1])\n\ntestcases/cases_api.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncheck_value = 200, expect_value = 20\n\n    def equals(check_value, expect_value):\n>       assert check_value == expect_value, f'{check_value} == {expect_value}'\nE       AssertionError: 200 == 20\n\ncommons/validate_util.py:8: AssertionError","steps":[],"attachments":[{"uid":"8f8402e08136145c","name":"log","source":"8f8402e08136145c.txt","type":"text/plain","size":925}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"cases::0","time":{"start":1675660854740,"stop":1675660854740,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"clear_session::0","time":{"start":1675660854741,"stop":1675660854741,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"testcases"},{"name":"suite","value":"cases_api"},{"name":"subSuite","value":"CasesApi"},{"name":"host","value":"kongdeMacBook-Pro.local"},{"name":"thread","value":"3282-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcases.cases_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cassesinfo","value":"{'name': 'access_token', 'method': 'get', 'url': 'http://api.weixin.qq.com/cgi-bin/token', 'params': {'grant_type': 'client_credential', 'appid': 'wx8a9de038e93f77ab', 'secret': '8326fc915928dee3165720c910effb86'}, 'validate': [{'eq': ['status_code', 20]}, {'con': ['status_code', 200]}, {'eq': ['status_code', 200]}]}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"ab833e134fe05973.json","parameterValues":["{'name': 'access_token', 'method': 'get', 'url': 'http://api.weixin.qq.com/cgi-bin/token', 'params': {'grant_type': 'client_credential', 'appid': 'wx8a9de038e93f77ab', 'secret': '8326fc915928dee3165720c910effb86'}, 'validate': [{'eq': ['status_code', 20]}, {'con': ['status_code', 200]}, {'eq': ['status_code', 200]}]}"]}